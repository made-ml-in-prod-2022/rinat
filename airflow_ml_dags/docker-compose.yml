version: '3.7'
# ====================================== AIRFLOW ENVIRONMENT VARIABLES =======================================
x-airflow-image: &airflow_image apache/airflow:2.3.2-python3.7

x-environment: &airflow_environment
  - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=True
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__CORE__STORE_DAG_CODE=True
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
  - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
  - MODEL_NAME=Classifier
  - AIRFLOW__LOGGING__LOGGING_LEVEL=INFO

# ====================================== /AIRFLOW ENVIRONMENT VARIABLES ======================================
services:
  postgres:
    image: postgres:12-alpine
    volumes:
      - ./docker-postgres-multiple-databases:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_MULTIPLE_DATABASES=airflowdb
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
    ports:
      - "5432:5432"

  init:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: airflow-docker
    depends_on:
      - postgres
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org'

  webserver:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: airflow-docker
    restart: always
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow/logs
    environment: *airflow_environment
    command: webserver

  scheduler:
    build:
      context: images/airflow-docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    image: airflow-docker
    restart: always
    depends_on:
      - postgres
    volumes:
      - logs:/opt/airflow/logs
      - ./dags/:/opt/airflow/dags/
      - ./data/:/opt/airflow/data/
      - /var/run/docker.sock:/var/run/docker.sock
    environment: *airflow_environment
    command: scheduler

  ml_base:
    build:
      context: images/airflow-ml-base
    image: airflow-ml-base
    restart: "no"

  download:
    build:
      context: images/airflow-download
    image: airflow-download
    depends_on:
      - ml_base
    restart: "no"

#  predict:
#    build:
#      context: images/airflow-predict
#    image: airflow-predict
#    depends_on:
#      - ml_base
#    restart: "no"
#
#  preprocess:
#    build:
#      context: images/airflow-preprocess
#    image: airflow-preprocess
#    depends_on:
#      - ml_base
#    restart: "no"
#
#  split:
#    build:
#      context: images/airflow-split
#    image: airflow-split
#    depends_on:
#      - ml_base
#    restart: "no"
#
#  train:
#    build:
#      context: images/airflow-train
#    image: airflow-train
#    depends_on:
#      - ml_base
#    restart: "no"
#
#  validate:
#    build:
#      context: images/airflow-validate
#    image: airflow-validate
#    depends_on:
#      - ml_base
#    restart: "no"

volumes:
  logs:
